Since the FUTURE_SHARED and FUTURE_QUEUE modes requires the use of semaphores,
we looked into how those were implemented in the xinu system, and basically
decided to disable interrupts while we needed to be inside of a critical
section. This is done via:

  intmask im=disable();
  // Critical section
  restore(im);

- BLOCKING THREADS - 
Because we need both producer and consumer threads to block in certain
situations (e.g. a consumer wanting to get a value from a future before a
producer comes into existence, or a producer arriving before anything else), we
also looked into how xinu blocks threads, and implemented the following function,
which basically takes a thread id and puts it to suspend:

  void put_thread_to_sleep(pid32 pid){
	suspend(pid);
  }

When we are ready to wake up a thread, we do:
	resume(pid);

While implementing FUTURE_SHARED was rather straight forward, implementing
FUTURE_QUEUE required more thought into how the producer/consumer threads slept
and woke each other up. These are the possible scenarios that we encounter and 
their solutions:
1. Producer is the first thing to arrive (i.e., one producer, no consumers)
   The producer will put itself to sleep.

2. Consumer is the first thing to arrive (i.e., one consumer, no producers)
   The consumer will put itself to sleep.

3. Producer comes in when consumer is waiting.
   The producer wakes up the consumer at the head of the get_array and goes on about
   its business.

4. Consumer comes in when producer is waiting.
   The consumer wakes up the producer at the head of the set_array and goes on about
   its business.


- QUEUE IMPLEMENTATION -
The code for our queue is located in xinu-arm/system/future_queue.c.
For this assignment, it is  basically linked list of thread ids.
The main functions are:

void Enqueue: - Takes a pointer to a queue, and adds the process id to the queue.

pid32 check_thread: - Returns the process id in front of the queue.

void Dequeue: Pops the process id at the front of the queue.

Alternatively we have used the array implementation also


